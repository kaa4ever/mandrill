<?php
/**
 * @file
 * Test class and methods for the Mandrill module.
 */

class MandrillTestCase extends DrupalWebTestCase {
  const FROM_EMAIL = 'Test Sender <sender@example.com>';

  /**
   * Returns info displayed in the test interface.
   *
   * @return array
   *   Formatted as specified by simpletest.
   */
  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'Mandrill Tests',
      'description' => 'Test core Mandrill functionality.',
      'group' => 'Mandrill',
    );
  }

  /**
   * Pre-test setup function.
   *
   * Enables dependencies.
   * Sets the mandrill_api_key variable to the test key.
   */
  protected function setUp() {
    // Use a profile that contains required modules:
    $prof = drupal_get_profile();
    $this->profile = $prof;
    // Enable modules required for the test.
    $enabled_modules = array(
      'libraries',
      'mandrill',
      'entity',
    );
    parent::setUp($enabled_modules);
    variable_set('mandrill_api_classname', 'DrupalMandrillTest');
    variable_set('mandrill_api_key', 'MANDRILL_TEST_API_KEY');
    variable_set('mandrill_test_mode', TRUE);

    // Create admin user.
    $perms = array(
      'access administration pages',
      'administer mailsystem',
    );

    $admin_user = $this->drupalCreateUser($perms);

    $this->drupalLogin($admin_user);

    // Set default mail system.
    $configuration_url = 'admin/config/system/mailsystem';

    $edit = array(
      'mailsystem[default-system]' => 'MandrillMailSystem',
    );

    $this->drupalPost($configuration_url, $edit, t('Save settings'));
    $this->assertText(t('The configuration options have been saved.'));

  }

  /**
   * Post-test function.
   *
   * Sets test mode to FALSE.
   */
  protected function tearDown() {
    parent::tearDown();

    variable_del('mandrill_api_classname');
    variable_del('mandrill_api_key');
    variable_del('mandrill_test_mode');
  }

  /**
   * Tests sending a message to multiple recipients.
   */
  public function testSendMessage() {
    $params = $this->getMessageTestParams();

    $message = drupal_mail('mandrill', 'default', NULL, language_default(), $params, self::FROM_EMAIL, FALSE);

    $recipients = 'Recipient One <recipient.one@example.com>,'
      . 'Recipient Two <recipient.two@example.com>,'
      . 'Recipient Three <recipient.three@example.com>';

    $message['to'] = $recipients;

    $mail_system = drupal_mail_system('mandrill', 'default');

    $result = $mail_system->mail($message);

    $this->assertTrue($result, 'Tested sending message to multiple recipients.');
  }

  /**
   * Tests sending a message to an invalid recipient.
   */
  public function testSendMessageInvalidRecipient() {
    $recipient = 'Recipient One <recipient.one>';

    $params = $this->getMessageTestParams();

    $result = drupal_mail('mandrill', 'default', $recipient, language_default(), $params, self::FROM_EMAIL);

    $this->assertFalse($result['result'], 'Tested sending message to an invalid recipient.');
  }

  /**
   * Tests sending a message to no recipients.
   */
  public function testSendMessageNoRecipients() {
    $recipient = '';

    $params = $this->getMessageTestParams();

    $result = drupal_mail('mandrill', 'default', $recipient, language_default(), $params, self::FROM_EMAIL);

    $this->assertFalse($result['result'], 'Tested sending message to no recipients.');
  }

  /**
   * Gets getting a list of templates for a given label.
   */
  public function testGetTemplates() {
    $templates = mandrill_get_templates();

    $this->assertTrue(!empty($templates), 'Tested retrieving templates.');

    if (!empty($templates) && is_array($templates)) {
      foreach ($templates as $template) {
        $this->assertTrue(!empty($template['name']), 'Tested valid template: ' . $template['name']);
      }
    }
  }

  /**
   * Tests getting a list of subaccounts.
   */
  public function testGetSubaccounts() {
    $subaccounts = mandrill_get_subaccounts();

    $this->assertTrue(!empty($subaccounts), 'Tested retrieving subaccounts.');

    if (!empty($subaccounts) && is_array($subaccounts)) {
      foreach ($subaccounts as $subaccount) {
        $this->assertTrue(!empty($subaccount['name']), 'Tested valid subaccount: ' . $subaccount['name']);
      }
    }
  }

  /**
   * Gets message params used in tests.
   */
  protected function getMessageTestParams() {
    $params = array(
      'body' => '<p>Mail content</p>',
      'subject' => 'Mail Subject',
    );

    return $params;
  }
}
