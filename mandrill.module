<?php

/**
 * @file
 * Enables Drupal to send email directly through Mandrill.
 */

define('MANDRILL_TEST_API_KEY', 'undefined');
define('MANDRILL_QUEUE', 'mandrill_queue');
define('MANDRILL_EMAIL_REGEX', '/^\s*(.+?)\s*<\s*([^>]+)\s*>$/');

/**
 * Implements hook_help().
 */
function mandrill_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#mandrill':
      $output = t('Allow for site emails to be sent through Mandrill.');
  }
  return $output;
}

/**
 * Access callback for sending test email.
 *
 * @return bool
 *   True if current user has access to send test messages
 */
function mandrill_test_access() {
  $has_permission = \Drupal::currentUser()->hasPermission('administer mandrill');
  $key = \Drupal::config('mandrill.settings')->get('mandrill_api_key');

  return $has_permission & !empty($key);
}

/**
 * Implements hook_cron_queue_info().
 */
function mandrill_cron_queue_info() {
  $queues = array();
  $queues[MANDRILL_QUEUE] = array(
    'worker callback' => 'mandrill_queue_worker_mailsend',
    'time' => \Drupal::config('mandrill.settings')->get('mandrill_queue_worker_timeout'),
  );
  return $queues;
}

/**
 * Sends a queued email.
 * @see mandrill_cron_queue_info()
 */
function mandrill_queue_worker_mailsend($data) {
  // Send the message stored in the queue item.
  mandrill_mailsend(
    $data['message'],
    $data['function'],
    $data['args']
  );
}

/**
 * Implements hook_mail().
 */
function mandrill_mail($key, &$message, $params) {
  if ($key == 'test') {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
    if ($params['include_attachment']) {
      $message['attachments'][] = \Drupal::service('file_system')->realpath('misc/druplicon.png');
      $message['body'] .= '  ' . t('The Drupal icon is included as an attachment to test the attachment functionality.');
    }
  }
}

/**
 * Abstracts sending of messages, allowing queueing option.
 *
 * @DEPRECATED
 */
function mandrill_mailsend($message, $function, $args = array()) {
  throw new \Exception('Use send() method on MandrillService instead.');
}

/**
 * The actual function that calls the API send message.
 *
 * This is the default function used by mandrill_mailsend().
 *
 * @param array $message
 *   Associative array containing message data.
 *
 * @return array
 *   Results of sending the message.
 *
 * @throws Mandrill_Error
 *
 */
function mandrill_sender_plain($message) {
  $api = \Drupal::service('mandrill.api');
  return $api->send($message);
}

/**
 * Display the names of the modules that are using Mailsystem.
 *
 * This is consistent with with Mailsystem's display. In the future, if
 * Mailsystem were to provide an API for their labeling, that should be used.
 *
 * @return array
 *   Array of all module names indexing to their "display" names,
 *   and some special items for non-module values like null, default-system,
 *   and some clarification talked onto the end of the Mandrill module's name.
 */
function mandrill_get_module_key_names() {
  $name_array = array(
    '' => '--none--',
    'default-system' => "Site-wide default",
  );
  $descriptions = array();
  foreach (system_rebuild_module_data() as $item) {
    if ($item->status) {
      $descriptions[$item->name] = (empty($item->info['package']) ? '' : $item->info['package']) . ' » ' . t('!module module', array('!module' => $item->info['name']));
    }
  }
  asort($descriptions);
  $mailsystem_settings = mailsystem_get();
  unset($mailsystem_settings['default-system']);
  foreach ($mailsystem_settings as $id => $class) {
    // Separate $id into $module and $key.
    $module = $id;
    while ($module && empty($descriptions[$module])) {
      // Remove a key from the end.
      $module = implode('_', explode('_', $module, -1));
    }
    // If an array key of the $mail_system variable is neither "default-system"
    // nor begins with a module name, then it should be unset.
    if (empty($module)) {
      // This shouldn't happen.
    }
    // Set $title to the human-readable module name.
    $title = preg_replace('/^.* » /', '', $descriptions[$module]);
    if ($key = substr($id, strlen($module) + 1)) {
      $title .= " ($key key)";
    }
    $name_array[$id] = $title;
  }

  return $name_array;
}

/**
 * Get a list of mandrill template objects.
 *
 * @return array
 *   An of available templates with complete data or NULL if none are available.
 *
 * @TODO: Move this to MandrillAPI class.
 */
function mandrill_get_templates() {
  // Only show the template settings if the mandrill api can be called.
  $templates = NULL;
  try {
    if ($mailer = mandrill_get_api_object()) {
      $templates = $mailer->templates->getList();
    }
  }
  catch (Mandrill_Error $e) {
    drupal_set_message(t('Mandrill: %message', array('%message' => $e->getMessage())), 'error');
    watchdog_exception('mandrill', $e);
  }
  return $templates;
}

/**
 * Get a list of webhooks.
 *
 * @TODO: Move this to MandrillAPI class.
 */
function mandrill_get_webhooks() {
  $webhooks = array();
  try {
    if ($mandrill = mandrill_get_api_object()) {
      $webhooks = $mandrill->webhooks->getList();
    }
  }
  catch (Mandrill_Error $e) {
    drupal_set_message(t('Mandrill: %message', array('%message' => $e->getMessage())), 'error');
    watchdog_exception('mandrill', $e);
  }

  return $webhooks;
}

/**
 * Get a list of inbound email domains.
 *
 * @TODO: Move this to MandrillAPI class.
 */
function mandrill_get_inbound_domains() {
  $domains = array();
  try {
    if ($mandrill = mandrill_get_api_object()) {
      $domains = $mandrill->inbound->domains();
    }
    else {
      $domains = FALSE;
    }
  }
  catch (Mandrill_Error $e) {
    drupal_set_message(t('Mandrill: %message', array('%message' => $e->getMessage())), 'error');
    watchdog_exception('mandrill', $e);
  }

  return $domains;
}

/**
 * Get a list of inbound email routes for a domain.
 *
 * @TODO: Move this to MandrillAPI class.
 */
function mandrill_get_inbound_routes($domain) {
  $routes = array();
  try {
    if ($mandrill = mandrill_get_api_object()) {
      $routes = $mandrill->inbound->routes($domain);
    }
  }
  catch (Mandrill_Error $e) {
    drupal_set_message(t('Mandrill: %message', array('%message' => $e->getMessage())), 'error');
    watchdog_exception('mandrill', $e);
  }

  return $routes;
}

/**
 * Create a new inbound domain.
 *
 * @TODO: Move this to MandrillAPI class.
 */
function mandrill_add_inbound_domain($domain) {
  $result = NULL;
  try {
    if ($mandrill = mandrill_get_api_object()) {
      $result = $mandrill->inbound->addDomain($domain);
    }
  }
  catch (Mandrill_Error $e) {
    drupal_set_message(t('Mandrill: %message', array('%message' => $e->getMessage())), 'error');
    watchdog_exception('mandrill', $e);
  }

  return $result;
}

/**
 * Create a new inbound domain.
 *
 * @TODO: Move this to MandrillAPI class.
 */
function mandrill_add_webhook($path, $events, $description = 'Drupal Webhook') {
  $result = NULL;
  try {
    if ($mandrill = mandrill_get_api_object()) {
      $result = $mandrill->webhooks->add($GLOBALS['base_url'] . '/' . $path, $description, $events);
    }
  }
  catch (Mandrill_Error $e) {
    drupal_set_message(t('Mandrill: %message', array('%message' => $e->getMessage())), 'error');
    watchdog_exception('mandrill', $e);
  }

  return $result;
}

/**
 * Delete an inbound domain.
 *
 * @TODO: Move this to MandrillAPI class.
 */
function mandrill_delete_inbound_domain($domain) {
  $result = NULL;
  try {
    if ($mandrill = mandrill_get_api_object()) {
      $result = $mandrill->inbound->deleteDomain($domain);
    }
  }
  catch (Mandrill_Error $e) {
    drupal_set_message(t('Mandrill: %message', array('%message' => $e->getMessage())), 'error');
    watchdog_exception('mandrill', $e);
  }

  return $result;
}

/**
 * Create a new inbound route for a domain.
 *
 * @TODO: Move this to MandrillAPI class.
 */
function mandrill_add_inbound_route($domain, $pattern, $url) {
  $route = NULL;
  try {
    if ($mandrill = mandrill_get_api_object()) {
      $route = $mandrill->inbound->addRoute($domain, $pattern, $url);
    }
  }
  catch (Mandrill_Error $e) {
    drupal_set_message(t('Mandrill: %message', array('%message' => $e->getMessage())), 'error');
    watchdog_exception('mandrill', $e);
  }

  return $route;
}

/**
 * Helper to return a comma delimited list of mail keys to not log content for.
 *
 * @DEPRECATED
 */
function mandrill_mail_key_blacklist() {
  throw new \Exception('Read the value directly of the "mandrill.settings" configuration by key "mandrill_mail_key_blacklist"');
  // return \Drupal::config('mandrill.settings')->get('mandrill_mail_key_blacklist');
}

/**
 * Determine if mail should be processed asynchronously.
 *
 * @DEPRECATED
 */
function mandrill_process_async() {
  throw new \Exception('Read the value directly of the "mandrill.settings" configuration by key "mandrill_process_async"');
  //return \Drupal::config('mandrill.settings')->get('mandrill_process_async');
}

/**
 * Returns an array containing the from information for a Mandrill message.
 *
 * @DEPRECATED
 */
function mandrill_from() {
  throw new \Exception('Read the values directly of the "mandrill.settings" configuration by key "from_email" and "from_name"');
  /*$email = \Drupal::config('mandrill.settings')->get('mandrill_from');
  $name = \Drupal::config('mandrill.settings')->get('mandrill_from_name');

  return array(
    'email' => $email,
    'name' => $name,
  );*/
}
